//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 6 colors.
  struct color {
    /// Color `defaultBrandColor`.
    static let defaultBrandColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "defaultBrandColor")
    /// Color `defaultComplementaryColor`.
    static let defaultComplementaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "defaultComplementaryColor")
    /// Color `defaultDisabledColor`.
    static let defaultDisabledColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "defaultDisabledColor")
    /// Color `defaultEnabledColor`.
    static let defaultEnabledColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "defaultEnabledColor")
    /// Color `defaultPrimaryColor`.
    static let defaultPrimaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "defaultPrimaryColor")
    /// Color `defaultSecondaryColor`.
    static let defaultSecondaryColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "defaultSecondaryColor")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "defaultBrandColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func defaultBrandColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.defaultBrandColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "defaultComplementaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func defaultComplementaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.defaultComplementaryColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "defaultDisabledColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func defaultDisabledColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.defaultDisabledColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "defaultEnabledColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func defaultEnabledColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.defaultEnabledColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "defaultPrimaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func defaultPrimaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.defaultPrimaryColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "defaultSecondaryColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func defaultSecondaryColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.defaultSecondaryColor, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")

    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 74 images.
  struct image {
    /// Image `CalendarIcon`.
    static let calendarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CalendarIcon")
    /// Image `Calendar_img`.
    static let calendar_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "Calendar_img")
    /// Image `MoneyClockIcon`.
    static let moneyClockIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoneyClockIcon")
    /// Image `MoneyClock_img`.
    static let moneyClock_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoneyClock_img")
    /// Image `MoneyIcon`.
    static let moneyIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoneyIcon")
    /// Image `Money_img`.
    static let money_img = Rswift.ImageResource(bundle: R.hostingBundle, name: "Money_img")
    /// Image `female_1_happy`.
    static let female_1_happy = Rswift.ImageResource(bundle: R.hostingBundle, name: "female_1_happy")
    /// Image `female_1_normal`.
    static let female_1_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "female_1_normal")
    /// Image `female_1_sad`.
    static let female_1_sad = Rswift.ImageResource(bundle: R.hostingBundle, name: "female_1_sad")
    /// Image `female_2_happy`.
    static let female_2_happy = Rswift.ImageResource(bundle: R.hostingBundle, name: "female_2_happy")
    /// Image `female_2_normal`.
    static let female_2_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "female_2_normal")
    /// Image `female_2_sad`.
    static let female_2_sad = Rswift.ImageResource(bundle: R.hostingBundle, name: "female_2_sad")
    /// Image `male_1_happy`.
    static let male_1_happy = Rswift.ImageResource(bundle: R.hostingBundle, name: "male_1_happy")
    /// Image `male_1_normal`.
    static let male_1_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "male_1_normal")
    /// Image `male_1_sad`.
    static let male_1_sad = Rswift.ImageResource(bundle: R.hostingBundle, name: "male_1_sad")
    /// Image `male_2_happy`.
    static let male_2_happy = Rswift.ImageResource(bundle: R.hostingBundle, name: "male_2_happy")
    /// Image `male_2_normal`.
    static let male_2_normal = Rswift.ImageResource(bundle: R.hostingBundle, name: "male_2_normal")
    /// Image `male_2_sad`.
    static let male_2_sad = Rswift.ImageResource(bundle: R.hostingBundle, name: "male_2_sad")
    /// Image `office_female1_table0`.
    static let office_female1_table0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table0")
    /// Image `office_female1_table10`.
    static let office_female1_table10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table10")
    /// Image `office_female1_table11`.
    static let office_female1_table11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table11")
    /// Image `office_female1_table12`.
    static let office_female1_table12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table12")
    /// Image `office_female1_table13`.
    static let office_female1_table13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table13")
    /// Image `office_female1_table1`.
    static let office_female1_table1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table1")
    /// Image `office_female1_table2`.
    static let office_female1_table2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table2")
    /// Image `office_female1_table3`.
    static let office_female1_table3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table3")
    /// Image `office_female1_table4`.
    static let office_female1_table4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table4")
    /// Image `office_female1_table5`.
    static let office_female1_table5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table5")
    /// Image `office_female1_table6`.
    static let office_female1_table6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table6")
    /// Image `office_female1_table7`.
    static let office_female1_table7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table7")
    /// Image `office_female1_table8`.
    static let office_female1_table8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table8")
    /// Image `office_female1_table9`.
    static let office_female1_table9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female1_table9")
    /// Image `office_female2_table0`.
    static let office_female2_table0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table0")
    /// Image `office_female2_table10`.
    static let office_female2_table10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table10")
    /// Image `office_female2_table11`.
    static let office_female2_table11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table11")
    /// Image `office_female2_table12`.
    static let office_female2_table12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table12")
    /// Image `office_female2_table13`.
    static let office_female2_table13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table13")
    /// Image `office_female2_table1`.
    static let office_female2_table1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table1")
    /// Image `office_female2_table2`.
    static let office_female2_table2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table2")
    /// Image `office_female2_table3`.
    static let office_female2_table3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table3")
    /// Image `office_female2_table4`.
    static let office_female2_table4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table4")
    /// Image `office_female2_table5`.
    static let office_female2_table5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table5")
    /// Image `office_female2_table6`.
    static let office_female2_table6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table6")
    /// Image `office_female2_table7`.
    static let office_female2_table7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table7")
    /// Image `office_female2_table8`.
    static let office_female2_table8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table8")
    /// Image `office_female2_table9`.
    static let office_female2_table9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_female2_table9")
    /// Image `office_male1_table0`.
    static let office_male1_table0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table0")
    /// Image `office_male1_table10`.
    static let office_male1_table10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table10")
    /// Image `office_male1_table11`.
    static let office_male1_table11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table11")
    /// Image `office_male1_table12`.
    static let office_male1_table12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table12")
    /// Image `office_male1_table13`.
    static let office_male1_table13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table13")
    /// Image `office_male1_table1`.
    static let office_male1_table1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table1")
    /// Image `office_male1_table2`.
    static let office_male1_table2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table2")
    /// Image `office_male1_table3`.
    static let office_male1_table3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table3")
    /// Image `office_male1_table4`.
    static let office_male1_table4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table4")
    /// Image `office_male1_table5`.
    static let office_male1_table5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table5")
    /// Image `office_male1_table6`.
    static let office_male1_table6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table6")
    /// Image `office_male1_table7`.
    static let office_male1_table7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table7")
    /// Image `office_male1_table8`.
    static let office_male1_table8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table8")
    /// Image `office_male1_table9`.
    static let office_male1_table9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male1_table9")
    /// Image `office_male2_table0`.
    static let office_male2_table0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table0")
    /// Image `office_male2_table10`.
    static let office_male2_table10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table10")
    /// Image `office_male2_table11`.
    static let office_male2_table11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table11")
    /// Image `office_male2_table12`.
    static let office_male2_table12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table12")
    /// Image `office_male2_table13`.
    static let office_male2_table13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table13")
    /// Image `office_male2_table1`.
    static let office_male2_table1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table1")
    /// Image `office_male2_table2`.
    static let office_male2_table2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table2")
    /// Image `office_male2_table3`.
    static let office_male2_table3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table3")
    /// Image `office_male2_table4`.
    static let office_male2_table4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table4")
    /// Image `office_male2_table5`.
    static let office_male2_table5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table5")
    /// Image `office_male2_table6`.
    static let office_male2_table6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table6")
    /// Image `office_male2_table7`.
    static let office_male2_table7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table7")
    /// Image `office_male2_table8`.
    static let office_male2_table8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table8")
    /// Image `office_male2_table9`.
    static let office_male2_table9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "office_male2_table9")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CalendarIcon", bundle: ..., traitCollection: ...)`
    static func calendarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Calendar_img", bundle: ..., traitCollection: ...)`
    static func calendar_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoneyClockIcon", bundle: ..., traitCollection: ...)`
    static func moneyClockIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneyClockIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoneyClock_img", bundle: ..., traitCollection: ...)`
    static func moneyClock_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneyClock_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoneyIcon", bundle: ..., traitCollection: ...)`
    static func moneyIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneyIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Money_img", bundle: ..., traitCollection: ...)`
    static func money_img(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money_img, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "female_1_happy", bundle: ..., traitCollection: ...)`
    static func female_1_happy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.female_1_happy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "female_1_normal", bundle: ..., traitCollection: ...)`
    static func female_1_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.female_1_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "female_1_sad", bundle: ..., traitCollection: ...)`
    static func female_1_sad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.female_1_sad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "female_2_happy", bundle: ..., traitCollection: ...)`
    static func female_2_happy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.female_2_happy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "female_2_normal", bundle: ..., traitCollection: ...)`
    static func female_2_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.female_2_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "female_2_sad", bundle: ..., traitCollection: ...)`
    static func female_2_sad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.female_2_sad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "male_1_happy", bundle: ..., traitCollection: ...)`
    static func male_1_happy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male_1_happy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "male_1_normal", bundle: ..., traitCollection: ...)`
    static func male_1_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male_1_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "male_1_sad", bundle: ..., traitCollection: ...)`
    static func male_1_sad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male_1_sad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "male_2_happy", bundle: ..., traitCollection: ...)`
    static func male_2_happy(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male_2_happy, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "male_2_normal", bundle: ..., traitCollection: ...)`
    static func male_2_normal(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male_2_normal, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "male_2_sad", bundle: ..., traitCollection: ...)`
    static func male_2_sad(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.male_2_sad, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table0", bundle: ..., traitCollection: ...)`
    static func office_female1_table0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table1", bundle: ..., traitCollection: ...)`
    static func office_female1_table1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table10", bundle: ..., traitCollection: ...)`
    static func office_female1_table10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table11", bundle: ..., traitCollection: ...)`
    static func office_female1_table11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table12", bundle: ..., traitCollection: ...)`
    static func office_female1_table12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table13", bundle: ..., traitCollection: ...)`
    static func office_female1_table13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table2", bundle: ..., traitCollection: ...)`
    static func office_female1_table2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table3", bundle: ..., traitCollection: ...)`
    static func office_female1_table3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table4", bundle: ..., traitCollection: ...)`
    static func office_female1_table4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table5", bundle: ..., traitCollection: ...)`
    static func office_female1_table5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table6", bundle: ..., traitCollection: ...)`
    static func office_female1_table6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table7", bundle: ..., traitCollection: ...)`
    static func office_female1_table7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table8", bundle: ..., traitCollection: ...)`
    static func office_female1_table8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female1_table9", bundle: ..., traitCollection: ...)`
    static func office_female1_table9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female1_table9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table0", bundle: ..., traitCollection: ...)`
    static func office_female2_table0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table1", bundle: ..., traitCollection: ...)`
    static func office_female2_table1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table10", bundle: ..., traitCollection: ...)`
    static func office_female2_table10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table11", bundle: ..., traitCollection: ...)`
    static func office_female2_table11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table12", bundle: ..., traitCollection: ...)`
    static func office_female2_table12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table13", bundle: ..., traitCollection: ...)`
    static func office_female2_table13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table2", bundle: ..., traitCollection: ...)`
    static func office_female2_table2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table3", bundle: ..., traitCollection: ...)`
    static func office_female2_table3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table4", bundle: ..., traitCollection: ...)`
    static func office_female2_table4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table5", bundle: ..., traitCollection: ...)`
    static func office_female2_table5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table6", bundle: ..., traitCollection: ...)`
    static func office_female2_table6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table7", bundle: ..., traitCollection: ...)`
    static func office_female2_table7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table8", bundle: ..., traitCollection: ...)`
    static func office_female2_table8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_female2_table9", bundle: ..., traitCollection: ...)`
    static func office_female2_table9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_female2_table9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table0", bundle: ..., traitCollection: ...)`
    static func office_male1_table0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table1", bundle: ..., traitCollection: ...)`
    static func office_male1_table1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table10", bundle: ..., traitCollection: ...)`
    static func office_male1_table10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table11", bundle: ..., traitCollection: ...)`
    static func office_male1_table11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table12", bundle: ..., traitCollection: ...)`
    static func office_male1_table12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table13", bundle: ..., traitCollection: ...)`
    static func office_male1_table13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table2", bundle: ..., traitCollection: ...)`
    static func office_male1_table2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table3", bundle: ..., traitCollection: ...)`
    static func office_male1_table3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table4", bundle: ..., traitCollection: ...)`
    static func office_male1_table4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table5", bundle: ..., traitCollection: ...)`
    static func office_male1_table5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table6", bundle: ..., traitCollection: ...)`
    static func office_male1_table6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table7", bundle: ..., traitCollection: ...)`
    static func office_male1_table7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table8", bundle: ..., traitCollection: ...)`
    static func office_male1_table8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male1_table9", bundle: ..., traitCollection: ...)`
    static func office_male1_table9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male1_table9, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table0", bundle: ..., traitCollection: ...)`
    static func office_male2_table0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table1", bundle: ..., traitCollection: ...)`
    static func office_male2_table1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table10", bundle: ..., traitCollection: ...)`
    static func office_male2_table10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table11", bundle: ..., traitCollection: ...)`
    static func office_male2_table11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table12", bundle: ..., traitCollection: ...)`
    static func office_male2_table12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table13", bundle: ..., traitCollection: ...)`
    static func office_male2_table13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table2", bundle: ..., traitCollection: ...)`
    static func office_male2_table2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table3", bundle: ..., traitCollection: ...)`
    static func office_male2_table3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table4", bundle: ..., traitCollection: ...)`
    static func office_male2_table4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table5", bundle: ..., traitCollection: ...)`
    static func office_male2_table5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table6", bundle: ..., traitCollection: ...)`
    static func office_male2_table6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table7", bundle: ..., traitCollection: ...)`
    static func office_male2_table7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table8", bundle: ..., traitCollection: ...)`
    static func office_male2_table8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "office_male2_table9", bundle: ..., traitCollection: ...)`
    static func office_male2_table9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.office_male2_table9, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 61 localization keys.
    struct localizable {
      /// en translation: (Set your workdays to update here)
      ///
      /// Locales: pt-BR, en
      static let setYourWorkdaysToUpdateHere = Rswift.StringResource(key: "(Set your workdays to update here)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Avatar
      ///
      /// Locales: pt-BR, en
      static let avatar = Rswift.StringResource(key: "Avatar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Calendar_img
      ///
      /// Locales: pt-BR, en
      static let calendar_img = Rswift.StringResource(key: "Calendar_img", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: F
      ///
      /// Locales: pt-BR, en
      static let fri_weekday_short = Rswift.StringResource(key: "Fri_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Finish
      ///
      /// Locales: pt-BR, en
      static let finish = Rswift.StringResource(key: "Finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: For this we will need only a few information. Let's go? 😄
      ///
      /// Locales: pt-BR, en
      static let forThisWeWillNeedOnlyAFewInformationLetSGo😄 = Rswift.StringResource(key: "For this we will need only a few information. Let's go? 😄", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Fri
      ///
      /// Locales: pt-BR, en
      static let fri_weekday_medium = Rswift.StringResource(key: "Fri_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Friday
      ///
      /// Locales: pt-BR, en
      static let fri_weekday_long = Rswift.StringResource(key: "Fri_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Hours per week
      ///
      /// Locales: pt-BR, en
      static let hoursPerWeek = Rswift.StringResource(key: "Hours per week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: How much hours do you work per week?
      ///
      /// Locales: pt-BR, en
      static let howManyHoursDoYouWorkPerWeek = Rswift.StringResource(key: "How many hours do you work per week?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Income
      ///
      /// Locales: pt-BR, en
      static let income = Rswift.StringResource(key: "Income", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: It will take
      ///
      /// Locales: pt-BR, en
      static let itWillTake = Rswift.StringResource(key: "It will take", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Let's find out how much things really cost?
      ///
      /// Locales: pt-BR, en
      static let letSFindOutHowMuchThingsReallyCost = Rswift.StringResource(key: "Let's find out how much things really cost?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: M
      ///
      /// Locales: pt-BR, en
      static let mon_weekday_short = Rswift.StringResource(key: "Mon_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Mon
      ///
      /// Locales: pt-BR, en
      static let mon_weekday_medium = Rswift.StringResource(key: "Mon_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Monday
      ///
      /// Locales: pt-BR, en
      static let mon_weekday_long = Rswift.StringResource(key: "Mon_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: MoneyClock_img
      ///
      /// Locales: pt-BR, en
      static let moneyClock_img = Rswift.StringResource(key: "MoneyClock_img", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Money_img
      ///
      /// Locales: pt-BR, en
      static let money_img = Rswift.StringResource(key: "Money_img", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Monthly Income
      ///
      /// Locales: pt-BR, en
      static let monthlyIncome = Rswift.StringResource(key: "Monthly Income", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Now you can select a different avatar. Go to settings screen to select yours
      ///
      /// Locales: pt-BR, en
      static let nowYouCanSelectADifferentAvatarGoToSettingsScreenToSelectYours = Rswift.StringResource(key: "Now you can select a different avatar. Go to settings screen to select yours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: S
      ///
      /// Locales: pt-BR, en
      static let sat_weekday_short = Rswift.StringResource(key: "Sat_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: S
      ///
      /// Locales: pt-BR, en
      static let sun_weekday_short = Rswift.StringResource(key: "Sun_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Sat
      ///
      /// Locales: pt-BR, en
      static let sat_weekday_medium = Rswift.StringResource(key: "Sat_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Saturday
      ///
      /// Locales: pt-BR, en
      static let sat_weekday_long = Rswift.StringResource(key: "Sat_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Select your Avatar
      ///
      /// Locales: pt-BR, en
      static let selectYourAvatar = Rswift.StringResource(key: "Select your Avatar", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Sun
      ///
      /// Locales: pt-BR, en
      static let sun_weekday_medium = Rswift.StringResource(key: "Sun_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Sunday
      ///
      /// Locales: pt-BR, en
      static let sun_weekday_long = Rswift.StringResource(key: "Sun_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: T
      ///
      /// Locales: pt-BR, en
      static let thu_weekday_short = Rswift.StringResource(key: "Thu_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: T
      ///
      /// Locales: pt-BR, en
      static let tue_weekday_short = Rswift.StringResource(key: "Tue_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Thu
      ///
      /// Locales: pt-BR, en
      static let thu_weekday_medium = Rswift.StringResource(key: "Thu_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Thursday
      ///
      /// Locales: pt-BR, en
      static let thu_weekday_long = Rswift.StringResource(key: "Thu_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Tue
      ///
      /// Locales: pt-BR, en
      static let tue_weekday_medium = Rswift.StringResource(key: "Tue_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Tuesday
      ///
      /// Locales: pt-BR, en
      static let tue_weekday_long = Rswift.StringResource(key: "Tue_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Type below the price
      ///
      /// Locales: pt-BR, en
      static let typeBelowThePrice = Rswift.StringResource(key: "Type below the price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: W
      ///
      /// Locales: pt-BR, en
      static let wed_weekday_short = Rswift.StringResource(key: "Wed_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Wed
      ///
      /// Locales: pt-BR, en
      static let wed_weekday_medium = Rswift.StringResource(key: "Wed_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Wednesday
      ///
      /// Locales: pt-BR, en
      static let wed_weekday_long = Rswift.StringResource(key: "Wed_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Weekly Worktime
      ///
      /// Locales: pt-BR, en
      static let weeklyWorktime = Rswift.StringResource(key: "Weekly Worktime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Weekly workdays
      ///
      /// Locales: pt-BR, en
      static let weeklyWorkdays = Rswift.StringResource(key: "Weekly workdays", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Welcome!
      ///
      /// Locales: pt-BR, en
      static let welcome = Rswift.StringResource(key: "Welcome!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: What is your income?
      ///
      /// Locales: pt-BR, en
      static let whatIsYourIncome = Rswift.StringResource(key: "What is your income?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Which days of the week do you usually work?
      ///
      /// Locales: pt-BR, en
      static let whichDaysOfTheWeekDoYouUsuallyWork = Rswift.StringResource(key: "Which days of the week do you usually work?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Working
      ///
      /// Locales: pt-BR, en
      static let working = Rswift.StringResource(key: "Working", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Yay! update
      ///
      /// Locales: pt-BR, en
      static let yayUpdate = Rswift.StringResource(key: "Yay! update", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: hours
      ///
      /// Locales: pt-BR, en
      static let hours = Rswift.StringResource(key: "hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: per day
      ///
      /// Locales: pt-BR, en
      static let perDay = Rswift.StringResource(key: "per day", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: per month
      ///
      /// Locales: pt-BR, en
      static let perMonth = Rswift.StringResource(key: "per month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: per week
      ///
      /// Locales: pt-BR, en
      static let perWeek = Rswift.StringResource(key: "per week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table1
      ///
      /// Locales: pt-BR, en
      static let table1 = Rswift.StringResource(key: "table1", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table10
      ///
      /// Locales: pt-BR, en
      static let table10 = Rswift.StringResource(key: "table10", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table11
      ///
      /// Locales: pt-BR, en
      static let table11 = Rswift.StringResource(key: "table11", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table12
      ///
      /// Locales: pt-BR, en
      static let table12 = Rswift.StringResource(key: "table12", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table2
      ///
      /// Locales: pt-BR, en
      static let table2 = Rswift.StringResource(key: "table2", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table3
      ///
      /// Locales: pt-BR, en
      static let table3 = Rswift.StringResource(key: "table3", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table4
      ///
      /// Locales: pt-BR, en
      static let table4 = Rswift.StringResource(key: "table4", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table5
      ///
      /// Locales: pt-BR, en
      static let table5 = Rswift.StringResource(key: "table5", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table6
      ///
      /// Locales: pt-BR, en
      static let table6 = Rswift.StringResource(key: "table6", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table7
      ///
      /// Locales: pt-BR, en
      static let table7 = Rswift.StringResource(key: "table7", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table8
      ///
      /// Locales: pt-BR, en
      static let table8 = Rswift.StringResource(key: "table8", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: table9
      ///
      /// Locales: pt-BR, en
      static let table9 = Rswift.StringResource(key: "table9", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: to pay only those
      ///
      /// Locales: pt-BR, en
      static let toPayOnlyThose = Rswift.StringResource(key: "to pay only those", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)

      /// en translation: (Set your workdays to update here)
      ///
      /// Locales: pt-BR, en
      static func setYourWorkdaysToUpdateHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("(Set your workdays to update here)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "(Set your workdays to update here)"
        }

        return NSLocalizedString("(Set your workdays to update here)", bundle: bundle, comment: "")
      }

      /// en translation: Avatar
      ///
      /// Locales: pt-BR, en
      static func avatar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Avatar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Avatar"
        }

        return NSLocalizedString("Avatar", bundle: bundle, comment: "")
      }

      /// en translation: Calendar_img
      ///
      /// Locales: pt-BR, en
      static func calendar_img(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Calendar_img", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Calendar_img"
        }

        return NSLocalizedString("Calendar_img", bundle: bundle, comment: "")
      }

      /// en translation: F
      ///
      /// Locales: pt-BR, en
      static func fri_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fri_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fri_weekday_short"
        }

        return NSLocalizedString("Fri_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: Finish
      ///
      /// Locales: pt-BR, en
      static func finish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Finish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Finish"
        }

        return NSLocalizedString("Finish", bundle: bundle, comment: "")
      }

      /// en translation: For this we will need only a few information. Let's go? 😄
      ///
      /// Locales: pt-BR, en
      static func forThisWeWillNeedOnlyAFewInformationLetSGo😄(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("For this we will need only a few information. Let's go? 😄", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "For this we will need only a few information. Let's go? 😄"
        }

        return NSLocalizedString("For this we will need only a few information. Let's go? 😄", bundle: bundle, comment: "")
      }

      /// en translation: Fri
      ///
      /// Locales: pt-BR, en
      static func fri_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fri_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fri_weekday_medium"
        }

        return NSLocalizedString("Fri_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Friday
      ///
      /// Locales: pt-BR, en
      static func fri_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fri_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fri_weekday_long"
        }

        return NSLocalizedString("Fri_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: Hours per week
      ///
      /// Locales: pt-BR, en
      static func hoursPerWeek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hours per week", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hours per week"
        }

        return NSLocalizedString("Hours per week", bundle: bundle, comment: "")
      }

      /// en translation: How much hours do you work per week?
      ///
      /// Locales: pt-BR, en
      static func howManyHoursDoYouWorkPerWeek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("How many hours do you work per week?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "How many hours do you work per week?"
        }

        return NSLocalizedString("How many hours do you work per week?", bundle: bundle, comment: "")
      }

      /// en translation: Income
      ///
      /// Locales: pt-BR, en
      static func income(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Income", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Income"
        }

        return NSLocalizedString("Income", bundle: bundle, comment: "")
      }

      /// en translation: It will take
      ///
      /// Locales: pt-BR, en
      static func itWillTake(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("It will take", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "It will take"
        }

        return NSLocalizedString("It will take", bundle: bundle, comment: "")
      }

      /// en translation: Let's find out how much things really cost?
      ///
      /// Locales: pt-BR, en
      static func letSFindOutHowMuchThingsReallyCost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Let's find out how much things really cost?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Let's find out how much things really cost?"
        }

        return NSLocalizedString("Let's find out how much things really cost?", bundle: bundle, comment: "")
      }

      /// en translation: M
      ///
      /// Locales: pt-BR, en
      static func mon_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mon_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mon_weekday_short"
        }

        return NSLocalizedString("Mon_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: Mon
      ///
      /// Locales: pt-BR, en
      static func mon_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mon_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mon_weekday_medium"
        }

        return NSLocalizedString("Mon_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Monday
      ///
      /// Locales: pt-BR, en
      static func mon_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mon_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mon_weekday_long"
        }

        return NSLocalizedString("Mon_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: MoneyClock_img
      ///
      /// Locales: pt-BR, en
      static func moneyClock_img(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("MoneyClock_img", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "MoneyClock_img"
        }

        return NSLocalizedString("MoneyClock_img", bundle: bundle, comment: "")
      }

      /// en translation: Money_img
      ///
      /// Locales: pt-BR, en
      static func money_img(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Money_img", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Money_img"
        }

        return NSLocalizedString("Money_img", bundle: bundle, comment: "")
      }

      /// en translation: Monthly Income
      ///
      /// Locales: pt-BR, en
      static func monthlyIncome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Monthly Income", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Monthly Income"
        }

        return NSLocalizedString("Monthly Income", bundle: bundle, comment: "")
      }

      /// en translation: Now you can select a different avatar. Go to settings screen to select yours
      ///
      /// Locales: pt-BR, en
      static func nowYouCanSelectADifferentAvatarGoToSettingsScreenToSelectYours(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Now you can select a different avatar. Go to settings screen to select yours", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Now you can select a different avatar. Go to settings screen to select yours"
        }

        return NSLocalizedString("Now you can select a different avatar. Go to settings screen to select yours", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: pt-BR, en
      static func sat_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sat_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sat_weekday_short"
        }

        return NSLocalizedString("Sat_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: pt-BR, en
      static func sun_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sun_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sun_weekday_short"
        }

        return NSLocalizedString("Sun_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: Sat
      ///
      /// Locales: pt-BR, en
      static func sat_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sat_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sat_weekday_medium"
        }

        return NSLocalizedString("Sat_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Saturday
      ///
      /// Locales: pt-BR, en
      static func sat_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sat_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sat_weekday_long"
        }

        return NSLocalizedString("Sat_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: Select your Avatar
      ///
      /// Locales: pt-BR, en
      static func selectYourAvatar(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Select your Avatar", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Select your Avatar"
        }

        return NSLocalizedString("Select your Avatar", bundle: bundle, comment: "")
      }

      /// en translation: Sun
      ///
      /// Locales: pt-BR, en
      static func sun_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sun_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sun_weekday_medium"
        }

        return NSLocalizedString("Sun_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Sunday
      ///
      /// Locales: pt-BR, en
      static func sun_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sun_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sun_weekday_long"
        }

        return NSLocalizedString("Sun_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: T
      ///
      /// Locales: pt-BR, en
      static func thu_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thu_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thu_weekday_short"
        }

        return NSLocalizedString("Thu_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: T
      ///
      /// Locales: pt-BR, en
      static func tue_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tue_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tue_weekday_short"
        }

        return NSLocalizedString("Tue_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: Thu
      ///
      /// Locales: pt-BR, en
      static func thu_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thu_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thu_weekday_medium"
        }

        return NSLocalizedString("Thu_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Thursday
      ///
      /// Locales: pt-BR, en
      static func thu_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thu_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thu_weekday_long"
        }

        return NSLocalizedString("Thu_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: Tue
      ///
      /// Locales: pt-BR, en
      static func tue_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tue_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tue_weekday_medium"
        }

        return NSLocalizedString("Tue_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Tuesday
      ///
      /// Locales: pt-BR, en
      static func tue_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tue_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tue_weekday_long"
        }

        return NSLocalizedString("Tue_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: Type below the price
      ///
      /// Locales: pt-BR, en
      static func typeBelowThePrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Type below the price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Type below the price"
        }

        return NSLocalizedString("Type below the price", bundle: bundle, comment: "")
      }

      /// en translation: W
      ///
      /// Locales: pt-BR, en
      static func wed_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wed_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wed_weekday_short"
        }

        return NSLocalizedString("Wed_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: Wed
      ///
      /// Locales: pt-BR, en
      static func wed_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wed_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wed_weekday_medium"
        }

        return NSLocalizedString("Wed_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Wednesday
      ///
      /// Locales: pt-BR, en
      static func wed_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wed_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wed_weekday_long"
        }

        return NSLocalizedString("Wed_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: Weekly Worktime
      ///
      /// Locales: pt-BR, en
      static func weeklyWorktime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Weekly Worktime", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Weekly Worktime"
        }

        return NSLocalizedString("Weekly Worktime", bundle: bundle, comment: "")
      }

      /// en translation: Weekly workdays
      ///
      /// Locales: pt-BR, en
      static func weeklyWorkdays(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Weekly workdays", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Weekly workdays"
        }

        return NSLocalizedString("Weekly workdays", bundle: bundle, comment: "")
      }

      /// en translation: Welcome!
      ///
      /// Locales: pt-BR, en
      static func welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Welcome!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Welcome!"
        }

        return NSLocalizedString("Welcome!", bundle: bundle, comment: "")
      }

      /// en translation: What is your income?
      ///
      /// Locales: pt-BR, en
      static func whatIsYourIncome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("What is your income?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "What is your income?"
        }

        return NSLocalizedString("What is your income?", bundle: bundle, comment: "")
      }

      /// en translation: Which days of the week do you usually work?
      ///
      /// Locales: pt-BR, en
      static func whichDaysOfTheWeekDoYouUsuallyWork(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Which days of the week do you usually work?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Which days of the week do you usually work?"
        }

        return NSLocalizedString("Which days of the week do you usually work?", bundle: bundle, comment: "")
      }

      /// en translation: Working
      ///
      /// Locales: pt-BR, en
      static func working(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Working", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Working"
        }

        return NSLocalizedString("Working", bundle: bundle, comment: "")
      }

      /// en translation: Yay! update
      ///
      /// Locales: pt-BR, en
      static func yayUpdate(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Yay! update", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Yay! update"
        }

        return NSLocalizedString("Yay! update", bundle: bundle, comment: "")
      }

      /// en translation: hours
      ///
      /// Locales: pt-BR, en
      static func hours(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hours", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hours"
        }

        return NSLocalizedString("hours", bundle: bundle, comment: "")
      }

      /// en translation: per day
      ///
      /// Locales: pt-BR, en
      static func perDay(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("per day", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "per day"
        }

        return NSLocalizedString("per day", bundle: bundle, comment: "")
      }

      /// en translation: per month
      ///
      /// Locales: pt-BR, en
      static func perMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("per month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "per month"
        }

        return NSLocalizedString("per month", bundle: bundle, comment: "")
      }

      /// en translation: per week
      ///
      /// Locales: pt-BR, en
      static func perWeek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("per week", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "per week"
        }

        return NSLocalizedString("per week", bundle: bundle, comment: "")
      }

      /// en translation: table1
      ///
      /// Locales: pt-BR, en
      static func table1(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table1", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table1"
        }

        return NSLocalizedString("table1", bundle: bundle, comment: "")
      }

      /// en translation: table10
      ///
      /// Locales: pt-BR, en
      static func table10(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table10", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table10"
        }

        return NSLocalizedString("table10", bundle: bundle, comment: "")
      }

      /// en translation: table11
      ///
      /// Locales: pt-BR, en
      static func table11(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table11", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table11"
        }

        return NSLocalizedString("table11", bundle: bundle, comment: "")
      }

      /// en translation: table12
      ///
      /// Locales: pt-BR, en
      static func table12(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table12", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table12"
        }

        return NSLocalizedString("table12", bundle: bundle, comment: "")
      }

      /// en translation: table2
      ///
      /// Locales: pt-BR, en
      static func table2(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table2", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table2"
        }

        return NSLocalizedString("table2", bundle: bundle, comment: "")
      }

      /// en translation: table3
      ///
      /// Locales: pt-BR, en
      static func table3(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table3", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table3"
        }

        return NSLocalizedString("table3", bundle: bundle, comment: "")
      }

      /// en translation: table4
      ///
      /// Locales: pt-BR, en
      static func table4(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table4", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table4"
        }

        return NSLocalizedString("table4", bundle: bundle, comment: "")
      }

      /// en translation: table5
      ///
      /// Locales: pt-BR, en
      static func table5(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table5", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table5"
        }

        return NSLocalizedString("table5", bundle: bundle, comment: "")
      }

      /// en translation: table6
      ///
      /// Locales: pt-BR, en
      static func table6(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table6", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table6"
        }

        return NSLocalizedString("table6", bundle: bundle, comment: "")
      }

      /// en translation: table7
      ///
      /// Locales: pt-BR, en
      static func table7(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table7", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table7"
        }

        return NSLocalizedString("table7", bundle: bundle, comment: "")
      }

      /// en translation: table8
      ///
      /// Locales: pt-BR, en
      static func table8(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table8", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table8"
        }

        return NSLocalizedString("table8", bundle: bundle, comment: "")
      }

      /// en translation: table9
      ///
      /// Locales: pt-BR, en
      static func table9(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("table9", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "table9"
        }

        return NSLocalizedString("table9", bundle: bundle, comment: "")
      }

      /// en translation: to pay only those
      ///
      /// Locales: pt-BR, en
      static func toPayOnlyThose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to pay only those", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to pay only those"
        }

        return NSLocalizedString("to pay only those", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
