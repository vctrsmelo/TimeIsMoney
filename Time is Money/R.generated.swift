//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map(Locale.init)
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 1 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.image` struct is generated, and contains static references to 20 images.
  struct image {
    /// Image `CalendarIcon`.
    static let calendarIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "CalendarIcon")
    /// Image `Calendar`.
    static let calendar = Rswift.ImageResource(bundle: R.hostingBundle, name: "Calendar")
    /// Image `MoneyClockIcon`.
    static let moneyClockIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoneyClockIcon")
    /// Image `MoneyClock`.
    static let moneyClock = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoneyClock")
    /// Image `MoneyIcon`.
    static let moneyIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "MoneyIcon")
    /// Image `Money`.
    static let money = Rswift.ImageResource(bundle: R.hostingBundle, name: "Money")
    /// Image `table0`.
    static let table0 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table0")
    /// Image `table10`.
    static let table10 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table10")
    /// Image `table11`.
    static let table11 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table11")
    /// Image `table12`.
    static let table12 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table12")
    /// Image `table13`.
    static let table13 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table13")
    /// Image `table1`.
    static let table1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table1")
    /// Image `table2`.
    static let table2 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table2")
    /// Image `table3`.
    static let table3 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table3")
    /// Image `table4`.
    static let table4 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table4")
    /// Image `table5`.
    static let table5 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table5")
    /// Image `table6`.
    static let table6 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table6")
    /// Image `table7`.
    static let table7 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table7")
    /// Image `table8`.
    static let table8 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table8")
    /// Image `table9`.
    static let table9 = Rswift.ImageResource(bundle: R.hostingBundle, name: "table9")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Calendar", bundle: ..., traitCollection: ...)`
    static func calendar(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendar, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "CalendarIcon", bundle: ..., traitCollection: ...)`
    static func calendarIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.calendarIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "Money", bundle: ..., traitCollection: ...)`
    static func money(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.money, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoneyClock", bundle: ..., traitCollection: ...)`
    static func moneyClock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneyClock, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoneyClockIcon", bundle: ..., traitCollection: ...)`
    static func moneyClockIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneyClockIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "MoneyIcon", bundle: ..., traitCollection: ...)`
    static func moneyIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.moneyIcon, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table0", bundle: ..., traitCollection: ...)`
    static func table0(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table0, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table1", bundle: ..., traitCollection: ...)`
    static func table1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table10", bundle: ..., traitCollection: ...)`
    static func table10(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table10, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table11", bundle: ..., traitCollection: ...)`
    static func table11(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table11, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table12", bundle: ..., traitCollection: ...)`
    static func table12(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table12, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table13", bundle: ..., traitCollection: ...)`
    static func table13(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table13, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table2", bundle: ..., traitCollection: ...)`
    static func table2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table3", bundle: ..., traitCollection: ...)`
    static func table3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table4", bundle: ..., traitCollection: ...)`
    static func table4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table5", bundle: ..., traitCollection: ...)`
    static func table5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table5, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table6", bundle: ..., traitCollection: ...)`
    static func table6(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table6, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table7", bundle: ..., traitCollection: ...)`
    static func table7(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table7, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table8", bundle: ..., traitCollection: ...)`
    static func table8(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table8, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "table9", bundle: ..., traitCollection: ...)`
    static func table9(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.table9, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 2 localization tables.
  struct string {
    /// This `R.string.launchScreen` struct is generated, and contains static references to 0 localization keys.
    struct launchScreen {
      fileprivate init() {}
    }

    /// This `R.string.localizable` struct is generated, and contains static references to 39 localization keys.
    struct localizable {
      /// en translation: (Set your workdays to update here)
      ///
      /// Locales: pt-BR, en
      static let setYourWorkdaysToUpdateHere = Rswift.StringResource(key: "(Set your workdays to update here)", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: F
      ///
      /// Locales: pt-BR, en
      static let fri_weekday_short = Rswift.StringResource(key: "Fri_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Finish
      ///
      /// Locales: pt-BR, en
      static let finish = Rswift.StringResource(key: "Finish", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: For this we will only need 3 information. Let's go? 😄
      ///
      /// Locales: pt-BR, en
      static let forThisWeWillOnlyNeedThreeInformationLetSGo😄 = Rswift.StringResource(key: "For this we will only need three information. Let's go? 😄", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Fri
      ///
      /// Locales: pt-BR, en
      static let fri_weekday_medium = Rswift.StringResource(key: "Fri_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Friday
      ///
      /// Locales: pt-BR, en
      static let fri_weekday_long = Rswift.StringResource(key: "Fri_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Hours per week
      ///
      /// Locales: pt-BR, en
      static let hoursPerWeek = Rswift.StringResource(key: "Hours per week", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: How much hours do you work per week?
      ///
      /// Locales: pt-BR, en
      static let howMuchHoursDoYouWorkPerWeek = Rswift.StringResource(key: "How much hours do you work per week?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Income
      ///
      /// Locales: pt-BR, en
      static let income = Rswift.StringResource(key: "Income", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: It will take
      ///
      /// Locales: pt-BR, en
      static let itWillTake = Rswift.StringResource(key: "It will take", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Let's find out how much things really cost?
      ///
      /// Locales: pt-BR, en
      static let letSFindOutHowMuchThingsReallyCost = Rswift.StringResource(key: "Let's find out how much things really cost?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: M
      ///
      /// Locales: pt-BR, en
      static let mon_weekday_short = Rswift.StringResource(key: "Mon_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Mon
      ///
      /// Locales: pt-BR, en
      static let mon_weekday_medium = Rswift.StringResource(key: "Mon_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Monday
      ///
      /// Locales: pt-BR, en
      static let mon_weekday_long = Rswift.StringResource(key: "Mon_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Monthly Income
      ///
      /// Locales: pt-BR, en
      static let monthlyIncome = Rswift.StringResource(key: "Monthly Income", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: S
      ///
      /// Locales: pt-BR, en
      static let sat_weekday_short = Rswift.StringResource(key: "Sat_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: S
      ///
      /// Locales: pt-BR, en
      static let sun_weekday_short = Rswift.StringResource(key: "Sun_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Sat
      ///
      /// Locales: pt-BR, en
      static let sat_weekday_medium = Rswift.StringResource(key: "Sat_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Saturday
      ///
      /// Locales: pt-BR, en
      static let sat_weekday_long = Rswift.StringResource(key: "Sat_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Sun
      ///
      /// Locales: pt-BR, en
      static let sun_weekday_medium = Rswift.StringResource(key: "Sun_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Sunday
      ///
      /// Locales: pt-BR, en
      static let sun_weekday_long = Rswift.StringResource(key: "Sun_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: T
      ///
      /// Locales: pt-BR, en
      static let thu_weekday_short = Rswift.StringResource(key: "Thu_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: T
      ///
      /// Locales: pt-BR, en
      static let tue_weekday_short = Rswift.StringResource(key: "Tue_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Thu
      ///
      /// Locales: pt-BR, en
      static let thu_weekday_medium = Rswift.StringResource(key: "Thu_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Thursday
      ///
      /// Locales: pt-BR, en
      static let thu_weekday_long = Rswift.StringResource(key: "Thu_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Tue
      ///
      /// Locales: pt-BR, en
      static let tue_weekday_medium = Rswift.StringResource(key: "Tue_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Tuesday
      ///
      /// Locales: pt-BR, en
      static let tue_weekday_long = Rswift.StringResource(key: "Tue_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Type below the price
      ///
      /// Locales: pt-BR, en
      static let typeBelowThePrice = Rswift.StringResource(key: "Type below the price", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: W
      ///
      /// Locales: pt-BR, en
      static let wed_weekday_short = Rswift.StringResource(key: "Wed_weekday_short", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Wed
      ///
      /// Locales: pt-BR, en
      static let wed_weekday_medium = Rswift.StringResource(key: "Wed_weekday_medium", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Wednesday
      ///
      /// Locales: pt-BR, en
      static let wed_weekday_long = Rswift.StringResource(key: "Wed_weekday_long", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Weekly Worktime
      ///
      /// Locales: pt-BR, en
      static let weeklyWorktime = Rswift.StringResource(key: "Weekly Worktime", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Weekly workdays
      ///
      /// Locales: pt-BR, en
      static let weeklyWorkdays = Rswift.StringResource(key: "Weekly workdays", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Welcome!
      ///
      /// Locales: pt-BR, en
      static let welcome = Rswift.StringResource(key: "Welcome!", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: What is your income per month?
      ///
      /// Locales: pt-BR, en
      static let whatIsYourIncomePerMonth = Rswift.StringResource(key: "What is your income per month?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: Which days of the week do you usually work?
      ///
      /// Locales: pt-BR, en
      static let whichDaysOfTheWeekDoYouUsuallyWork = Rswift.StringResource(key: "Which days of the week do you usually work?", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: hours
      ///
      /// Locales: pt-BR, en
      static let hours = Rswift.StringResource(key: "hours", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: per month
      ///
      /// Locales: pt-BR, en
      static let perMonth = Rswift.StringResource(key: "per month", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)
      /// en translation: to pay only those
      ///
      /// Locales: pt-BR, en
      static let toPayOnlyThose = Rswift.StringResource(key: "to pay only those", tableName: "Localizable", bundle: R.hostingBundle, locales: ["pt-BR", "en"], comment: nil)

      /// en translation: (Set your workdays to update here)
      ///
      /// Locales: pt-BR, en
      static func setYourWorkdaysToUpdateHere(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("(Set your workdays to update here)", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "(Set your workdays to update here)"
        }

        return NSLocalizedString("(Set your workdays to update here)", bundle: bundle, comment: "")
      }

      /// en translation: F
      ///
      /// Locales: pt-BR, en
      static func fri_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fri_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fri_weekday_short"
        }

        return NSLocalizedString("Fri_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: Finish
      ///
      /// Locales: pt-BR, en
      static func finish(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Finish", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Finish"
        }

        return NSLocalizedString("Finish", bundle: bundle, comment: "")
      }

      /// en translation: For this we will only need 3 information. Let's go? 😄
      ///
      /// Locales: pt-BR, en
      static func forThisWeWillOnlyNeedThreeInformationLetSGo😄(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("For this we will only need three information. Let's go? 😄", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "For this we will only need three information. Let's go? 😄"
        }

        return NSLocalizedString("For this we will only need three information. Let's go? 😄", bundle: bundle, comment: "")
      }

      /// en translation: Fri
      ///
      /// Locales: pt-BR, en
      static func fri_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fri_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fri_weekday_medium"
        }

        return NSLocalizedString("Fri_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Friday
      ///
      /// Locales: pt-BR, en
      static func fri_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Fri_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Fri_weekday_long"
        }

        return NSLocalizedString("Fri_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: Hours per week
      ///
      /// Locales: pt-BR, en
      static func hoursPerWeek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Hours per week", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Hours per week"
        }

        return NSLocalizedString("Hours per week", bundle: bundle, comment: "")
      }

      /// en translation: How much hours do you work per week?
      ///
      /// Locales: pt-BR, en
      static func howMuchHoursDoYouWorkPerWeek(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("How much hours do you work per week?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "How much hours do you work per week?"
        }

        return NSLocalizedString("How much hours do you work per week?", bundle: bundle, comment: "")
      }

      /// en translation: Income
      ///
      /// Locales: pt-BR, en
      static func income(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Income", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Income"
        }

        return NSLocalizedString("Income", bundle: bundle, comment: "")
      }

      /// en translation: It will take
      ///
      /// Locales: pt-BR, en
      static func itWillTake(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("It will take", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "It will take"
        }

        return NSLocalizedString("It will take", bundle: bundle, comment: "")
      }

      /// en translation: Let's find out how much things really cost?
      ///
      /// Locales: pt-BR, en
      static func letSFindOutHowMuchThingsReallyCost(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Let's find out how much things really cost?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Let's find out how much things really cost?"
        }

        return NSLocalizedString("Let's find out how much things really cost?", bundle: bundle, comment: "")
      }

      /// en translation: M
      ///
      /// Locales: pt-BR, en
      static func mon_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mon_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mon_weekday_short"
        }

        return NSLocalizedString("Mon_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: Mon
      ///
      /// Locales: pt-BR, en
      static func mon_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mon_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mon_weekday_medium"
        }

        return NSLocalizedString("Mon_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Monday
      ///
      /// Locales: pt-BR, en
      static func mon_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Mon_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Mon_weekday_long"
        }

        return NSLocalizedString("Mon_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: Monthly Income
      ///
      /// Locales: pt-BR, en
      static func monthlyIncome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Monthly Income", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Monthly Income"
        }

        return NSLocalizedString("Monthly Income", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: pt-BR, en
      static func sat_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sat_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sat_weekday_short"
        }

        return NSLocalizedString("Sat_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: S
      ///
      /// Locales: pt-BR, en
      static func sun_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sun_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sun_weekday_short"
        }

        return NSLocalizedString("Sun_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: Sat
      ///
      /// Locales: pt-BR, en
      static func sat_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sat_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sat_weekday_medium"
        }

        return NSLocalizedString("Sat_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Saturday
      ///
      /// Locales: pt-BR, en
      static func sat_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sat_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sat_weekday_long"
        }

        return NSLocalizedString("Sat_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: Sun
      ///
      /// Locales: pt-BR, en
      static func sun_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sun_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sun_weekday_medium"
        }

        return NSLocalizedString("Sun_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Sunday
      ///
      /// Locales: pt-BR, en
      static func sun_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Sun_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Sun_weekday_long"
        }

        return NSLocalizedString("Sun_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: T
      ///
      /// Locales: pt-BR, en
      static func thu_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thu_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thu_weekday_short"
        }

        return NSLocalizedString("Thu_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: T
      ///
      /// Locales: pt-BR, en
      static func tue_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tue_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tue_weekday_short"
        }

        return NSLocalizedString("Tue_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: Thu
      ///
      /// Locales: pt-BR, en
      static func thu_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thu_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thu_weekday_medium"
        }

        return NSLocalizedString("Thu_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Thursday
      ///
      /// Locales: pt-BR, en
      static func thu_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Thu_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Thu_weekday_long"
        }

        return NSLocalizedString("Thu_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: Tue
      ///
      /// Locales: pt-BR, en
      static func tue_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tue_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tue_weekday_medium"
        }

        return NSLocalizedString("Tue_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Tuesday
      ///
      /// Locales: pt-BR, en
      static func tue_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Tue_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Tue_weekday_long"
        }

        return NSLocalizedString("Tue_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: Type below the price
      ///
      /// Locales: pt-BR, en
      static func typeBelowThePrice(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Type below the price", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Type below the price"
        }

        return NSLocalizedString("Type below the price", bundle: bundle, comment: "")
      }

      /// en translation: W
      ///
      /// Locales: pt-BR, en
      static func wed_weekday_short(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wed_weekday_short", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wed_weekday_short"
        }

        return NSLocalizedString("Wed_weekday_short", bundle: bundle, comment: "")
      }

      /// en translation: Wed
      ///
      /// Locales: pt-BR, en
      static func wed_weekday_medium(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wed_weekday_medium", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wed_weekday_medium"
        }

        return NSLocalizedString("Wed_weekday_medium", bundle: bundle, comment: "")
      }

      /// en translation: Wednesday
      ///
      /// Locales: pt-BR, en
      static func wed_weekday_long(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Wed_weekday_long", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Wed_weekday_long"
        }

        return NSLocalizedString("Wed_weekday_long", bundle: bundle, comment: "")
      }

      /// en translation: Weekly Worktime
      ///
      /// Locales: pt-BR, en
      static func weeklyWorktime(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Weekly Worktime", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Weekly Worktime"
        }

        return NSLocalizedString("Weekly Worktime", bundle: bundle, comment: "")
      }

      /// en translation: Weekly workdays
      ///
      /// Locales: pt-BR, en
      static func weeklyWorkdays(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Weekly workdays", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Weekly workdays"
        }

        return NSLocalizedString("Weekly workdays", bundle: bundle, comment: "")
      }

      /// en translation: Welcome!
      ///
      /// Locales: pt-BR, en
      static func welcome(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Welcome!", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Welcome!"
        }

        return NSLocalizedString("Welcome!", bundle: bundle, comment: "")
      }

      /// en translation: What is your income per month?
      ///
      /// Locales: pt-BR, en
      static func whatIsYourIncomePerMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("What is your income per month?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "What is your income per month?"
        }

        return NSLocalizedString("What is your income per month?", bundle: bundle, comment: "")
      }

      /// en translation: Which days of the week do you usually work?
      ///
      /// Locales: pt-BR, en
      static func whichDaysOfTheWeekDoYouUsuallyWork(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("Which days of the week do you usually work?", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "Which days of the week do you usually work?"
        }

        return NSLocalizedString("Which days of the week do you usually work?", bundle: bundle, comment: "")
      }

      /// en translation: hours
      ///
      /// Locales: pt-BR, en
      static func hours(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("hours", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "hours"
        }

        return NSLocalizedString("hours", bundle: bundle, comment: "")
      }

      /// en translation: per month
      ///
      /// Locales: pt-BR, en
      static func perMonth(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("per month", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "per month"
        }

        return NSLocalizedString("per month", bundle: bundle, comment: "")
      }

      /// en translation: to pay only those
      ///
      /// Locales: pt-BR, en
      static func toPayOnlyThose(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("to pay only those", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "to pay only those"
        }

        return NSLocalizedString("to pay only those", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
